// Generated by CoffeeScript 1.7.1
(function() {
  var __slice = [].slice;

  (function($) {
    'use strict';
    var BlackInkGallery;
    BlackInkGallery = function(el, options) {
      this.$el = $(el);
      this.options = options;
      this.$el.on("big.preprocessed", $.proxy(this.processFigures, this));
    };
    BlackInkGallery.prototype.preprocessFigures = function() {
      var $el, $figures, numberOfFigures, numberOfFiguresLoaded;
      $el = this.$el;
      numberOfFigures = ($figures = $el.children()).length;
      numberOfFiguresLoaded = 0;
      return $figures.each(function(index) {
        var $image;
        $image = $(this).find("img").first();
        return $(new Image()).load(function() {
          $image.data("width", this.width);
          $image.data("height", this.height);
          if (++numberOfFiguresLoaded === numberOfFigures) {
            return $el.trigger("big.preprocessed", $figures);
          }
        }).attr("src", $image.attr("src"));
      });
    };
    BlackInkGallery.prototype.processFigures = function() {
      var $figures, event, figures;
      event = arguments[0], figures = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      $figures = $(figures);
      if ($('body')[0].style["-webkit-writing-mode"] != null) {
        return this.horizontalScroll($figures);
      } else {
        return this.verticalScroll($figures, {
          numberOfColumns: 6
        });
      }
    };
    BlackInkGallery.prototype.verticalScroll = function($figures, options) {
      var $columns, $inner, columnHeights, i, numberOfColumns, _i, _ref;
      numberOfColumns = options.numberOfColumns;
      $inner = $('<div class="big-inner"></div>');
      $columns = [];
      columnHeights = [];
      for (i = _i = 0, _ref = numberOfColumns - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        $columns[i] = $('<div class="big-figure-column"></div>');
        columnHeights[i] = 0;
      }
      $figures.each((function(_this) {
        return function(index, figure) {
          var $image, h, shortest, shortestIndex, v, w, _j, _len;
          shortestIndex = 0;
          shortest = columnHeights[shortestIndex];
          for (i = _j = 0, _len = columnHeights.length; _j < _len; i = ++_j) {
            v = columnHeights[i];
            if (v < shortest) {
              shortestIndex = i;
              shortest = v;
            }
          }
          $columns[shortestIndex].append(_this.makeFigure($(figure), {
            captionFirst: false
          }));
          $image = $(figure).find("img").first();
          w = $image.data("width");
          h = $image.data("height");
          return columnHeights[shortestIndex] += 1 / w * h;
        };
      })(this));
      this.$el.addClass("black-ink-gallery vertical").html($inner.append($columns));
      return this.postCreateGallery();
    };
    BlackInkGallery.prototype.makeFigure = function($original, options) {
      var $caption, $content, $figure, $image, caption, captionFirst, captions, className, e, text;
      if (options == null) {
        options = {};
      }
      captionFirst = options.captionFirst;
      $figure = $('<div class="big-figure"></div>');
      $caption = $('<figurecaption class="big-figurecaption"></figurecaption>');
      $image = $original.find("img").first();
      if ((caption = $image.attr("data-caption")) != null) {
        try {
          captions = JSON.parse(caption);
        } catch (_error) {
          e = _error;
          captions = {
            caption: caption
          };
        }
        for (className in captions) {
          text = captions[className];
          $caption.append('<p class="' + className + '">' + text + '</p>');
        }
      }
      $content = captionFirst ? [$caption, $original] : [$original, $caption];
      return $figure.append($content);
    };
    BlackInkGallery.prototype.horizontalScroll = function($figures, options) {
      var $column, $el, $fg, $inner, figureGroup, hwRatioThreshold, minHeight, _i, _len;
      $el = this.$el;
      minHeight = 500;
      hwRatioThreshold = 1.5;
      figureGroup = [];
      $figures.each(function(index, figure) {
        var $image, h, w;
        $image = $(figure).find("img").first();
        w = $image.data("width");
        h = $image.data("height");
        if (h > minHeight && h / w > hwRatioThreshold) {
          return figureGroup.push($(figure));
        } else {
          return figureGroup.push($(figure));
        }
      });
      $el.addClass("black-ink-gallery horizontal").css("height", $el.parent().height());
      $inner = $('<div class="big-inner"></div>');
      for (_i = 0, _len = figureGroup.length; _i < _len; _i++) {
        $fg = figureGroup[_i];
        $column = $('<div class="big-figure-column"></div>');
        $inner.append($column.append(this.makeFigure($fg, {
          captionFirst: true
        })));
      }
      $el.html($inner);
      return this.postCreateGallery();
    };
    BlackInkGallery.prototype.postCreateGallery = function() {
      var $figures;
      $figures = this.$el.find('.big-figure');
      $figures.each(function(index, figure) {
        return window.getComputedStyle(figure).opacity;
      });
      return $figures.add(this.$el.find('img')).css("opacity", 1);
    };
    return $.fn.blackInkGallery = function() {
      return this.each(function() {
        return (new BlackInkGallery(this)).preprocessFigures();
      });
    };
  })(jQuery);

}).call(this);
